// <auto-generated />
using System;
using InfrastructureBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfrastructureBackend.Migrations
{
    [DbContext(typeof(ToDoItemDbContext))]
    partial class ToDoItemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ToDoItem.ToDoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<uint?>("_xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_todo_items");

                    b.ToTable("todo_items", "public");
                });

            modelBuilder.Entity("Domain.Entities.ToDoItem.ToDoItem", b =>
                {
                    b.OwnsOne("Domain.Entities.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("ToDoItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Instant>("CreatedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("created_at");

                            b1.Property<Instant?>("UpdatedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("updated_at");

                            b1.HasKey("ToDoItemId");

                            b1.ToTable("todo_items", "public");

                            b1.WithOwner()
                                .HasForeignKey("ToDoItemId")
                                .HasConstraintName("fk_todo_items_todo_items_id");
                        });

                    b.OwnsOne("Domain.Entities.ToDoItem.CompletionInfo", "CompletionInfo", b1 =>
                        {
                            b1.Property<Guid>("ToDoItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Instant?>("FirstCompletedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("first_completed_at");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnType("boolean")
                                .HasColumnName("is_completed");

                            b1.Property<Instant?>("LastCompletedAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("last_completed_at");

                            b1.HasKey("ToDoItemId");

                            b1.ToTable("todo_items", "public");

                            b1.WithOwner()
                                .HasForeignKey("ToDoItemId")
                                .HasConstraintName("fk_todo_items_todo_items_id");
                        });

                    b.OwnsOne("Domain.Entities.ToDoItem.ScheduleInfo", "ScheduleInfo", b1 =>
                        {
                            b1.Property<Guid>("ToDoItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<LocalDate?>("DueDate")
                                .HasColumnType("date")
                                .HasColumnName("due_date");

                            b1.Property<LocalTime?>("DueTime")
                                .HasColumnType("time")
                                .HasColumnName("due_time");

                            b1.Property<Instant?>("ScheduledAt")
                                .HasColumnType("timestamptz")
                                .HasColumnName("scheduled_at");

                            b1.Property<string>("TimeZoneId")
                                .HasColumnType("text")
                                .HasColumnName("time_zone_id");

                            b1.HasKey("ToDoItemId");

                            b1.HasIndex("ScheduledAt")
                                .HasDatabaseName("ix_todo_items_scheduled_at")
                                .HasFilter("\"scheduled_at\" IS NOT NULL");

                            b1.ToTable("todo_items", "public");

                            b1.WithOwner()
                                .HasForeignKey("ToDoItemId")
                                .HasConstraintName("fk_todo_items_todo_items_id");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("CompletionInfo")
                        .IsRequired();

                    b.Navigation("ScheduleInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
